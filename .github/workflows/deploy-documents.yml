# Trigger workflow only when files in services/documents or workflow itself change
name: CI/CD of services/documents

on:
  push:
    branches: [ "no_branch_in_order_to_disable_this_workflow" ]#use main to enable this workflow file
    paths:
      - 'services/documents/**'
      - '.github/workflows/deploy-documents.yml'

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Use paths-filter to detect changes in the documents service
      - name: Detect changes in documents service
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            documents:
              - 'services/documents/**'

      - name: Set up JDK 21
        if: steps.changes.outputs.documents == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Make gradlew executable
        if: steps.changes.outputs.documents == 'true'
        run: chmod +x gradlew

      - name: Build & test
        if: steps.changes.outputs.documents == 'true'
        run: ./gradlew :services:documents:build --no-daemon

      - name: Skip build
        if: steps.changes.outputs.documents != 'true'
        run: echo "No changes in services/documents; skipping build."

      #- name: Configure AWS credentials
      #  uses: aws-actions/configure-aws-credentials@v4
      #  with:
      #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: ${{ secrets.AWS_REGION }}

      #- name: Login to ECR
      #  run: |
      #    aws ecr get-login-password \
      #    | docker login --username AWS \
      #       --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      #- name: Build & push Docker image
      #  run: |
      #    IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/uns/service1:latest
      #    docker build --build-arg serviceName=documents \
      #    -f services/documents/Dockerfile \
      #    -t documents:${{ github.sha }} .
      #    docker tag documents:${{ github.sha }} $IMAGE_URI
      #    docker push $IMAGE_URI

      #- name: Download ECS Task Definition
      #  run: |
      #    aws ecs describe-task-definition --task-definition uns-documents-task --query taskDefinition > task-definition.json

      #- name: Fill in the new image ID in the ECS Task Definition
      #  id: task-def
      #  uses: aws-actions/amazon-ecs-render-task-definition@v1
      #  with:
      #    task-definition: task-definition.json
      #    container-name: uns-documents
      #    image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/uns/documents:latest

      #- name: Deploy Amazon ECS Task Definition
      #  uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      #  with:
      #    task-definition: ${{ steps.task-def.outputs.task-definition }}
      #    service: uns-documents-task-service-x3j6ck0t
      #    cluster: uns-documents
      #    wait-for-service-stability: true
