write tests for the core project

The user registration service should validate input, check if the user already exists by calling the user authority service. The user registration service will orchestrate the registration process by calling the authority service, the user service, the details service and the settings service by passing the necessary JSON input to them. Move the AuthorityModel to the user authority service

services can use kafka to publish events. Implement MQTT publishing, as well using HiveMQ


Create user management projects in the folder "services/user-management"
1--Create project "user-registration-service". The default config is to use the localhost database. Other config comes from env variables. If they exist then that is the user database to use. See how to inject env variables to application.yml. Create API:
"POST /users". Check if username already exists. If not then register authority, user, details and settings (call settings service)
2--create project "user-update-service" with API:
"PATCH /users/passwords",
"POST /users/passwords/forgot-requests"
"PATCH /users/enablements" to enable/disable accounts
"DELETE /users"
3--create project "user-details-service" with API:
"GET /users/{id}"
4--create project "user-settings-service" with API:
"POST /users/settings
"GET /users/settings",
"PUT /users/settings"
5--create project "user-login-service" with API:
"POST /users/login" uses spring JWT
6--create project "user-logout-service" with API:
"POST /users/logout"


Create a command line utility project allowing users to run certain tasks by calling (internally) the APIs. Find how to generate a client SDK in java from all APIs. The utility will use this SDK


Create project "databases-service" with API:
1--get number of registered databases
2--get number of connected databases
3--get number of databases the system failed to connect to
4--get configured databases
5--get currently running queries per database
6--get long-running queries per database
7--get queries per second per database
8--get queries per second fro all databases
9--Data sources can be databases, APIs (using spring data REST)


Create project "mqtt-service":
1--get number of MQTT connections


Create project "device-service":
1--get number of configured devices


Create project "store-and-forward-engine-service":
1--get store-and-forward engines that have quarantined items along with the number of quarantined items for each engine
2--get engines along with number of stored commands


Create project "alarms-service":
1--get number of active alarms
2--get active alarms
3--get inactive alarms
4--get alarm details


Create project "tags-service":
1--get number of tags
2--get number of realtime tag providers
3--get number of historical tag providers
4--get realtime tag providers
5--get historical tag providers



Create project "script-service":
1--get number of scripts configured
2--get scripts


Create project "logger-service":
1--get logs


Create project "diagnostics-service":
1--


Download status report as txt that has all status info or selected info


Create project "metrics-service"


Create project "analytics-service"


Create project "project-service"


Create project "email-service"


Create math library


Create data sources service
--can connect to various databases or other types of data providers
--data source explorer shows the data model (DDL) and query tool


Create historian simulator service used to create demo models and tags for testing


Create model service project representing a hierarchical model of entities.
--We can create folders, thing, events, metrics, KPIs, scripts.
--We can add, rename, delete, move up, move down, refresh entities.
--entities are associated with tags
--We can create, rename, delete, use model or entity templates. We can use templates to create new entities, or deassociate entities from templates, or create a template using an existing entity as the prototype


Create project service project used to create HMI projects
--a project has name, description etc. It also has windows that include components i.em tabs, gauges, charts, scripts, tags, reports, labels, buttons, textboxes, textareas, static images, images like tanks that show the percentage of its capacity used, tables
--the values of components are binded to tags, MySQL queries, static values, built-in or custom functions, expressions using my DSL to calculate things, to the value of another component's property
--the value binding can be event-triggered or by polling
--we can group and ungroup components
--we can create and use component templates
--we can use component group templates
--components properties: name, is enabled, is visible
--we can export the components of a window or an entire project
--we can import the components of a window or an entire project
--show a tree of the structure of a project
--create project template and new projects derived by it inherit its windows, components and properties


Create tag historian service project
--create tag groups
--create UDT (user-defined tags)
--create new tag, set the data source from which we retrieve its values or the MQTT topic, set the tag group it belongs to, set data type, set the deadband (if the new value minus the last value is >= deadband then store the new value in the historian and the realtime tag database
--enable or disable maintaining historian values


Create sequential function chart service project
--create an SFC which is a sequence of scripts to be executed


Create feedback service for people to submit feedback


Create support service for users to create support requests and support users to create and manage support tickets